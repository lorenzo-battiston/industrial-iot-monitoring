version: '3.8'

services:
  # Zookeeper - Required by this Kafka configuration
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - iot-network

  # Apache Kafka - Using the robust, proven multi-listener setup
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      # Internal port for container-to-container communication
      - "9092:9092"
      # External port for host-to-container communication
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://:9092,EXTERNAL://:29092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:9092,EXTERNAL://localhost:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - iot-network

  # Initialization container to create Kafka topics
  kafka-init:
    build:
      context: ./kafka-init
      dockerfile: Dockerfile
    depends_on:
      - kafka
    networks:
      - iot-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - iot-network

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mqtt-broker
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    command: mosquitto -c /mosquitto/config/mosquitto.conf
    networks:
      - iot-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: iot_analytics
      POSTGRES_USER: iot_user
      POSTGRES_PASSWORD: iot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./logs/postgres:/var/log/postgresql
    command: >
      postgres
      -c timezone=UTC
      -c log_timezone=UTC
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_statement=all
    networks:
      - iot-network

  # Apache Spark Master
  spark-master:
    image: bitnami/spark:3.5.1
    container_name: iot-spark-master
    ports:
      - '7080:8080'
      - '7077:7077'
    profiles:
      - spark-processing
    environment:
      SPARK_MODE: 'master'
      SPARK_MASTER_HOST: 'spark-master'
      SPARK_RPC_AUTHENTICATION_ENABLED: 'no'
      SPARK_RPC_ENCRYPTION_ENABLED: 'no'
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: 'no'
      SPARK_SSL_ENABLED: 'no'
    networks:
      - iot-network

  # Apache Spark Worker
  spark-worker:
    image: bitnami/spark:3.5.1
    container_name: iot-spark-worker
    depends_on:
      - spark-master
    ports:
      - '8081:8081'
    profiles:
      - spark-processing
    environment:
      SPARK_MODE: 'worker'
      SPARK_MASTER_URL: 'spark://spark-master:7077'
      SPARK_WORKER_MEMORY: '2g'
      SPARK_WORKER_CORES: '2'
      SPARK_RPC_AUTHENTICATION_ENABLED: 'no'
      SPARK_RPC_ENCRYPTION_ENABLED: 'no'
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: 'no'
      SPARK_SSL_ENABLED: 'no'
    networks:
      - iot-network

  # IoT Data Processor (Spark Application)
  iot-processor:
    build: 
      context: ./processing         
      dockerfile: DockerFile
    container_name: iot-spark-processor
    depends_on:
      spark-master:
        condition: service_started
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_started
    ports:
      - '4040:4040'
    profiles:
      - spark-processing
    environment:
      PROCESSOR_MASTER: 'spark://spark-master:7077'
      PROCESSOR_IMPLEMENTATION: 'it.elena.inf.spark.IoTProcessor'  
      PROCESSOR_ARGS: '--bootstrap-servers kafka:9092 --postgres-host postgres'
    volumes:
      - spark-checkpoints:/tmp/spark-checkpoint-iot
    networks:
      - iot-network
    restart: unless-stopped

  # Grafana for visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - postgres
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_LOG_LEVEL=debug
      - GF_LOG_FILTERS=tsdb.postgres:debug,api.datasources:debug,datasource:debug
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - iot-network

  # Web Dashboard for operators
  web-dashboard:
    build:
      context: ./web_dashboard
      dockerfile: Dockerfile
    container_name: web-dashboard
    depends_on:
      - postgres
      - kafka
    ports:
      - "5001:5001"
    environment:
      # These mirror the defaults baked into the Dockerfile but allow override from compose if required
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: iot_analytics
      DB_USER: iot_user
      DB_PASSWORD: iot_password
    networks:
      - iot-network

# Networks
networks:
  iot-network:
    driver: bridge

# Volumes
volumes:
  kafka_data:
  mosquitto_data:
  mosquitto_logs:
  postgres_data:
  spark-checkpoints:
    driver: local
  grafana_data: